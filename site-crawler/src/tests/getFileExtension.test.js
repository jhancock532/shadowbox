import { getFileExtension } from '../processing.js';
// Generated by CodiumAI

describe('getFileExtension', () => {
    // Returns file extension when given a valid URL with a file extension
    it('should return the file extension when given a valid URL with a file extension', () => {
        expect(getFileExtension('https://example.com/file.css')).toBe('css');
    });

    // Returns 'unknown' when given a valid URL without a file extension
    it('should return "unknown" when given a valid URL without a file extension', () => {
        expect(getFileExtension('https://example.com/file')).toBe('unknown');
    });

    // Ignores query parameters and hash fragments in the URL
    it('should ignore query parameters and hash fragments in the URL', () => {
        expect(
            getFileExtension(
                'https://example.com/file.css?param=value#fragment',
            ),
        ).toBe('css');
    });

    // Returns unknown when given an empty string
    it('should return an empty string when given an empty string', () => {
        expect(getFileExtension('')).toBe('unknown');
    });

    // Returns 'unknown' when given a URL with a dot in the path but no file extension
    it('should return "unknown" when given a URL with a dot in the path but no file extension', () => {
        expect(getFileExtension('https://example.com/file.')).toBe('unknown');
    });

    // Returns 'unknown' when given a URL with a file extension but no dot in the path
    it('should return "unknown" when given a URL with a file extension but no dot in the path', () => {
        expect(getFileExtension('https://example.com/filecss')).toBe('unknown');
    });

    // Returns the correct file extension when given a URL with a query parameter or hash fragment that contains a dot
    it('should return the correct file extension when given a URL with a query parameter or hash fragment that contains a dot', () => {
        expect(
            getFileExtension(
                'https://example.com/file.css?param=value#fragm.ent',
            ),
        ).toBe('css');
    });

    // Returns the correct file extension from a Next.js JSON reference
    it('should return the correct file extension when given a URL from a Next.js app', () => {
        expect(
            getFileExtension(
                'https://home.torchbox.dev/_next/data/BUILD_ID_CONSTANT/about.json?slug=about',
            ),
        ).toBe('json');
    });

    // Returns the correct file extension when querying a complex Next.js image url
    it('should return the correct file extension when given a lazy loaded URL from a Next.js app with encoded query params', () => {
        expect(
            getFileExtension(
                'https://torchbox.com/careers/_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fj97ble2qvn7g%2FTaymztyxoXanw0ug3txLk%2Fd5d15a16ff921ca2a03c4ac51beb24de%2Fbeachclean.jpeg%3Fw%3D1400%26h%3D1000&w=3840&q=75',
            ),
        ).toBe('jpeg');
    });

    // Returns the correct file extension for a lazy loaded Next.js image with query parameters
    it('should return the correct file extension when given a lazy loaded URL from a Next.js app with query params', () => {
        expect(
            getFileExtension(
                'https://torchbox.com/careers/_next/image?url=https%3A%2F%2Fimages.ctfassets.net%2Fj97ble2qvn7g%2F2pHNb6huXToJLcoW8dMDMT%2F3abdc989b36eafe824305edab06d10af%2Fmozilla-logo-bw-rgb-1024x293.png&w=1920&q=75',
            ),
        ).toBe('png');
    });

    // Returns the correct file extension when given a URL that contains multiple dots
    it('should return the correct file extension when given a URL that contains multiple dots', () => {
        expect(
            getFileExtension(
                'https://test.dev.s3.amazonaws.com/images/Example.URL_-_light.width-360.svg',
            ),
        ).toBe('svg');
    });

    // Trims whitespace from the file extension
    it('should trim whitespace from the file extension', () => {
        expect(getFileExtension('https://example.com/file.css ')).toBe('css');
    });

    // Handles URLs with multiple dots in the path correctly
    it('should return the correct file extension when given a URL with multiple dots in the path', () => {
        expect(getFileExtension('https://example.com/file.name.css')).toBe(
            'css',
        );
    });
});
